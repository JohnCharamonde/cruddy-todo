const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

// Refactor create to start saving new todos
// [ ] Use unique id generated by getNextUniqueId to create
// file path inside the dataDir

// [ ] If a POST request is made to collection route
// save file with todo item in this folder NOT OBJECT

exports.create = (text, callback) => {
  counter.getNextUniqueId((err, id) => {
    var filepath = path.join(exports.dataDir, `${id}.txt`);
    fs.writeFile(filepath, text, (err) => {
      if (err) {
        callback(err, null);
      } else {
        callback(null, { id, text });
      }
    });
  });
};
// [ ] Return an array of todos to client app whenever a
// GET request to collection route occurs
exports.readAll = (callback) => {
  fs.readdir(exports.dataDir, (err, files) => {
    if (err) {
      callback(err);
    } else {
      var data = _.map(files, (file) => {
        // The path.basename() methods returns the last portion of a path,
        // Trailing directory separators are ignored, see path.sep.
        var id = path.basename(file, '.txt'); // What does this line do?
        return { id: id, text: id };
      });
      callback(null, data);
    }
  });
};

// 1) find the current counter
// 2) loop thorugh from currentcounter to 0
// 3) tranform counter[i] into zeropadded number
// 4) check if you can read it/that it exisits
// 5) if so, push it to data as {id, text}
// 6) map readFile for all elements in array


exports.readOne = (id, callback) => {
  // go though directory to create files array
  //loop through files array to check if id === file id
    //if so, readFile

  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
